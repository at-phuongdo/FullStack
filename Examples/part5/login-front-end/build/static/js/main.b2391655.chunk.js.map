{"version":3,"sources":["services/notes.js","services/login.js","components/Notes.js","App.js","index.js"],"names":["baseUrl","token","axios","get","then","response","data","newObject","a","async","config","headers","Authorization","post","id","put","newToken","credentials","Notes","note","toggleImportance","label","important","className","content","onClick","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","setErrorMessage","username","setUsername","password","setPassword","user","setUser","useEffect","noteService","initialNotes","addNote","event","preventDefault","noteObject","date","Date","toISOString","Math","random","length","returnedNote","concat","handleNoteChange","console","log","target","value","notesToShow","filter","handleLogin","loginService","window","localStorage","setItem","JSON","stringify","setTimeout","onSubmit","type","name","onChange","map","key","find","n","changedNote","catch","error","alert","toggleImportanceOf","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b2391655.chunk.js","sourcesContent":["import axios from 'axios'\nconst baseUrl = 'http://localhost:3001/api/notes'\n\nlet token = null\n\nconst setToken = newToken => {\n  token = `bearer ${newToken}`\n}\n\nconst getAll = () => {\n  const request = axios.get(baseUrl)\n  return request.then(response => response.data)\n}\n\nconst create = async newObject => {\n  const config = {\n    headers: { Authorization: token },\n  }\n\n  const response = await axios.post(baseUrl, newObject, config)\n  return response.data\n}\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\n  return request.then(response => response.data)\n}\n\nexport default { getAll, create, update, setToken }\n","import axios from 'axios'\nconst baseUrl = 'http://localhost:3001/api/login'\n\nconst login = async credentials => {\n  const response = await axios.post(baseUrl, credentials)\n  return response.data\n}\n\nexport default { login }\n","import React from 'react'\n\nconst Notes = ({ note, toggleImportance }) => {\n  const label = note.important\n    ? 'make not important' : 'make important'\n\n  return (\n    <li className=\"note\">\n      {note.content} \n      <button onClick={toggleImportance}>{label}</button>\n    </li>\n  )\n}\n\nexport default Notes\n","import React, { useState, useEffect } from 'react'\nimport noteService from './services/notes'\nimport loginService from './services/login'\nimport Note from './components/Notes'\n\nconst App = () => {\n  const [notes, setNotes] = useState([])\n  const [newNote, setNewNote] = useState('')\n  const [showAll, setShowAll] = useState(true)\n  const [errorMessage, setErrorMessage] = useState('')\n  const [username, setUsername] = useState('')\n  const [password, setPassword] = useState('')\n  const [user, setUser] = useState(null)\n\n  useEffect(() => {\n    noteService\n      .getAll()\n      .then(initialNotes => {\n        setNotes(initialNotes)\n      })\n  }, [])\n\n  const addNote = (event) => {\n    event.preventDefault()\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() > 0.5,\n      id: notes.length + 1,\n    }\n    noteService\n      .create(noteObject)\n      .then(returnedNote => {\n        setNotes(notes.concat(returnedNote))\n        setNewNote('')\n      })\n  }\n\n  const handleNoteChange = (event) => {\n    console.log(event.target.value)\n    setNewNote(event.target.value)\n  }\n\n  const toggleImportanceOf = id => {\n    const note = notes.find(n => n.id === id)\n    const changedNote = { ...note, important: !note.important }\n\n    noteService\n      .update(id, changedNote).then(returnedNote => {\n        setNotes(notes.map(note => note.id !== id ? note : returnedNote))\n      })\n      .catch(error => {\n        alert(\n          `the note '${note.content}' was already deleted from server`\n        )\n        setNotes(notes.filter(n => n.id !== id))\n      })\n  }\n\n  const notesToShow = showAll\n    ? notes\n    : notes.filter(note => note.important === true)\n\n  const rows = () => notesToShow.map(note =>\n    <Note\n      key={note.id}\n      note={note}\n      toggleImportance={() => toggleImportanceOf(note.id)}\n    />\n  )\n\n  const handleLogin = async (event) => {\n    event.preventDefault()\n    try {\n      const user = await loginService.login({\n        username, password,\n      })\n\n      window.localStorage.setItem(\n        'loggedNoteappUser', JSON.stringify(user)\n      )\n\n      noteService.setToken(user.token)\n      setUser(user)\n      setUsername('')\n      setPassword('')\n    } catch (exception) {\n      setErrorMessage('Wrong credentials')\n      setTimeout(() => {\n        setErrorMessage(null)\n      }, 5000)\n    }\n  }\n\n  const loginForm = () => (\n    <form onSubmit={handleLogin}>\n      <div>\n        username\n          <input\n          type=\"text\"\n          value={username}\n          name=\"Username\"\n          onChange={({ target }) => setUsername(target.value)}\n        />\n      </div>\n      <div>\n        password\n          <input\n          type=\"password\"\n          value={password}\n          name=\"Password\"\n          onChange={({ target }) => setPassword(target.value)}\n        />\n      </div>\n      <button type=\"submit\">login</button>\n    </form>\n  )\n\n  const noteForm = () => (\n    <form onSubmit={addNote}>\n      <input\n        value={newNote}\n        onChange={handleNoteChange}\n      />\n      <button type=\"submit\">save</button>\n    </form>  \n  )\n\n  return (\n    <div>\n      <h2>Login</h2>\n      {/* {user === null && loginForm()}\n      {user !== null && noteForm()} */}\n      {user === null ?\n        loginForm() :\n        <div>\n          <p>{user.name} logged in</p>\n          {noteForm()}\n        </div>\n      }\n      <h1>Notes</h1>\n      <div>\n        <button onClick={() => setShowAll(!showAll)}>\n          show {showAll ? 'important' : 'all'}\n        </button>\n      </div>\n      <ul>\n        {rows()}\n      </ul>\n      <form onSubmit={addNote}>\n        <input value={newNote} onChange={handleNoteChange} />\n        <button type=\"submit\">save</button>\n      </form>\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.css'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}